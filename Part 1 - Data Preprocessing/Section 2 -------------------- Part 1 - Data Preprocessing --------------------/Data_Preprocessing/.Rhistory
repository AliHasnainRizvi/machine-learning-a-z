ls
print("hello")
cwd()
pwd()
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Data.csv')
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age
)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary
)
#encoding categorigal data
dataset$Country = factor(dataset$Country, levels = c('France', "Spain", "Germany"),
labels = c(1,2,3)
))
#encoding categorigal data
dataset$Country = factor(dataset$Country, levels = c('France', "Spain", "Germany"),
labels = c(1,2,3)
)
setwd("~/Desktop/Machine Learning A-Z/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/Data_Preprocessing")
getwd()
#encoding categorigal data
dataset$Country = factor(dataset$Country, levels = c('France', "Spain", "Germany"),
labels = c(1,2,3)
)
clear
clear()
clc()
#encoding categorigal data
dataset$Country = factor(dataset$Country, levels = c('France', "Spain", "Germany"),
labels = c(1,2,3)
)
# Importing the dataset
dataset = read.csv('Data.csv')
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age
)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary
)
View(dataset)
View(dataset)
dataset$Country = factor(dataset$Country, levels = c('France', "Spain", "Germany"),
labels = c(1,2,3)
)
dataset$Purchased = factor(dataset$Purchased, levels = c('No', 'Yes'),
labels = c(0,1)
)
#encoding categorigal data
dataset$Country = factor(dataset$Country, levels = c('France', "Spain", "Germany"),
labels = c(1,2,3),
labels = c(0,1)
)
dataset$Purchased = factor(dataset$Purchased, levels = c('No', 'Yes',"aa"),
labels = c(0,1)
)
dataset$Purchased = factor(dataset$Purchased, levels = c('No', 'Yes',"aa"),
labels = c(1)
)
View(dataset)
View(dataset)
library("caTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:caTools", unload=TRUE)
library("caTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:caTools", unload=TRUE)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
set.seed(22)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
test_set = subset(dataset, split == FALSE)
set.seed(22)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset,split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
View(test_set)
View(dataset)
set.seed(22)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset,split == TRUE)
test_set = subset(dataset, split == FALSE)
View(dataset)
View(test_set)
View(training_set)
View(dataset)
dataset = read.csv('Data.csv')
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age
)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary
)
View(dataset)
View(test_set)
View(training_set)
dataset$Country = factor(dataset$Country, levels = c('France', "Spain", "Germany"),
labels = c(1,2,3)
)
dataset$Purchased = factor(dataset$Purchased, levels = c('No', 'Yes'),
labels = c(0,1)
)
View(test_set)
View(training_set)
View(dataset)
View(test_set)
library(caTools)
set.seed(22)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset,split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
View(test_set)
View(dataset)
#set.seed(22)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
View(test_set)
View(training_set)
training_set = scale(training_set)
test_set = scale(test_set)
training_set[,2:3] = scale(training_set[,2:3])
test_set[,2:3] = scale(test_set[,2:3])
View(training_set)
View(test_set)
training_set[1]
training_set[2:3]
training_set[,2:3]
training_set[2:3] = scale(training_set[2:3])
test_set[2:3] = scale(test_set[2:3])
View(test_set)
View(test_set)
View(training_set)
training_set[1] = as.numeric(training_set[1])
